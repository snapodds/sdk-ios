// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SnapscreenFramework
import AVFoundation
import Combine
import CoreMedia
import Foundation
@_exported import SnapscreenFramework
import SnapscreenFramework.SnapscreenFramework_Private
import Swift
import UIKit
import _Concurrency
@objc public class SnapscreenQuadrangle : ObjectiveC.NSObject {
  @objc final public let point1: CoreGraphics.CGPoint
  @objc final public let point2: CoreGraphics.CGPoint
  @objc final public let point3: CoreGraphics.CGPoint
  @objc final public let point4: CoreGraphics.CGPoint
  @objc public init(point1: CoreGraphics.CGPoint, point2: CoreGraphics.CGPoint, point3: CoreGraphics.CGPoint, point4: CoreGraphics.CGPoint)
  @objc deinit
}
public enum SnapscreenEnvironment {
  case test
  case production
  public static func == (a: SnapscreenFramework.SnapscreenEnvironment, b: SnapscreenFramework.SnapscreenEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers public class Snapscreen {
  @objc public static let SnapscreenAuthenticationChangedNotification: Foundation.Notification.Name
  public static var instance: SnapscreenFramework.Snapscreen? {
    get
  }
  @objc public var country: Swift.String
  @objc public var usState: Swift.String?
  final public let snapUIConfiguration: SnapscreenFramework.SnapscreenSnapUIConfiguration
  final public let oddsUIConfiguration: SnapscreenFramework.SnapscreenOddDisplayUIConfiguration
  public class func setup(withClientId clientId: Swift.String, clientSecret: Swift.String, environment: SnapscreenFramework.SnapscreenEnvironment = .production)
  @objc public class func setup(withClientId clientId: Swift.String, clientSecret: Swift.String, backendURL: Foundation.URL)
  public func getOddsForSportEvent(withId id: Swift.Int64, completion: @escaping ((SnapscreenFramework.SnapOddsResult?) -> ()))
  @objc public var authorizationHeader: Swift.String? {
    @objc get
  }
  @objc public var currentTimestamp: Swift.Int64 {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OddsResultsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(sportEvent: SnapscreenFramework.SportEvent, tvChannel: SnapscreenFramework.TvChannel? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension SnapscreenFramework.OddsResultsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension SnapscreenFramework.OddsResultsViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public struct TvChannel : Swift.Codable {
  public var id: Swift.Int?
  public var code: Swift.String?
  public var name: Swift.String?
  public var grabbed: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SnapscreenFramework.TvChannel {
  public var logoURL: Foundation.URL? {
    get
  }
  public var posterURL: Foundation.URL? {
    get
  }
  public var liveImageURL: Foundation.URL? {
    get
  }
  public var liveImageURLSecured: Swift.Bool? {
    get
  }
}
public class SportEventSnapResultEntry : Swift.Codable {
  public var timestamp: Swift.Int64?
  public var snapscreenTimestampDelta: Swift.Int64?
  public var sportEvent: SnapscreenFramework.SportEvent?
  public var tvChannel: SnapscreenFramework.TvChannel?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SnapOddsResult : Swift.Codable {
  public var startTime: Foundation.Date? {
    get
  }
  public var competitors: [SnapscreenFramework.SnapOddsCompetitor]?
  public var players: [SnapscreenFramework.SnapOddsPlayer]?
  public var sportsBooks: [SnapscreenFramework.SnapOddsSportBook]?
  public var bestOffers: [SnapscreenFramework.SnapOddsOffer]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SnapOddsCompetitor : Swift.Codable {
  public var id: Swift.Int64?
  public var name: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SnapOddsPlayer : Swift.Codable {
  public var id: Swift.Int64?
  public var name: Swift.String?
  public var teamId: Swift.Int64?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SnapOddsSportBook : Swift.Codable {
  public var name: Swift.String?
  public var offers: [SnapscreenFramework.SnapOddsOffer]?
  public var redirectURL: Foundation.URL? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SnapOddsOffer : Swift.Codable {
  public var rawType: Swift.String?
  public var label: Swift.String?
  public var outcomes: [SnapscreenFramework.SnapOddsOutcome]?
  public var type: SnapscreenFramework.SnapOddsOfferType? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SnapOddsOfferType : Swift.String {
  case moneyLine
  case overUnder
  case spread
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SnapOddsOutcome : Swift.Codable {
  public var rawType: Swift.String?
  public var target: Swift.Double?
  public var odds: Swift.Double?
  public var competitorId: Swift.Int64?
  public var type: SnapscreenFramework.SnapOddsOutcomeType? {
    get
  }
  public var sportsBook: Swift.String?
  public var bestOutcome: Swift.Bool?
  public var redirectURL: Foundation.URL? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SnapOddsOutcomeType : Swift.String {
  case win
  case over
  case under
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class SnapscreenOddDisplayUIConfiguration {
  public var dismissButtonText: Swift.String?
  public var primaryBackgroundColor: UIKit.UIColor
  public var loadingLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var loadingActivityColor: UIKit.UIColor
  public var errorLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var logoImage: UIKit.UIImage?
  public var logoSize: CoreGraphics.CGSize?
  public var sportsLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var channelAndTimeLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var competitorsHeaderBackgroundColor: UIKit.UIColor
  public var competitorsHeaderSeparatorColor: UIKit.UIColor
  public var competitorsHeaderLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var bestOddsHeaderSeparatorColor: UIKit.UIColor
  public var bestOddsBackgroundColor: UIKit.UIColor
  public var bestOddsTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var bestOddsSpreadTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var bestOddsMoneyTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var bestOddsTotalTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var bestOddsCompetitorLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var bestOddsSportsBookBackgroundColor: UIKit.UIColor
  public var bestOddsSportsBookLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var bestOddsValueBackgroundColor: UIKit.UIColor
  public var bestOddsValueLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var bestOddsTargetLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var bestOddsSeparatorColor: UIKit.UIColor
  public var sportsBookLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var spreadTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var moneyTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var totalTitleLabel: SnapscreenFramework.SnapscreenUILabelWithTextConfiguration
  public var competitorLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var oddValueLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var oddTargetLabel: SnapscreenFramework.SnapscreenUILabelConfiguration
  public var oddValueBackgroundColor: UIKit.UIColor
  public var oddSeparatorColor: UIKit.UIColor
  public var sportsBookSeparatorColor: UIKit.UIColor
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SnapViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public class func forSportsMedia(configuration: SnapscreenFramework.SnapConfiguration = SnapConfiguration()) -> SnapscreenFramework.SnapViewController
  @_Concurrency.MainActor(unsafe) public class func forSportsOperator(configuration: SnapscreenFramework.SnapConfiguration = SnapConfiguration(), snapDelegate: SnapscreenFramework.SnapscreenSnapDelegate) -> SnapscreenFramework.SnapViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public func continueSnapping()
  @objc deinit
}
extension SnapscreenFramework.SnapViewController : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_hasMissingDesignatedInitializers public class SnapscreenUILabelConfiguration {
  public var textColor: UIKit.UIColor
  public var font: UIKit.UIFont
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SnapscreenUILabelWithTextConfiguration {
  public var textColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public var text: Swift.String
  @objc deinit
}
public struct SportEvent : Swift.Codable {
  public var eventId: Swift.Int64
  public var externalId: Swift.String?
  public var startTime: Foundation.Date? {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var tvChannelId: Swift.Int64?
  public var category: Swift.String?
  public var sport: Swift.String?
  public var tournament: Swift.String?
  public var dataProviderCode: Swift.String?
  public var dataProviderMatchId: Swift.String?
  public var competitors: [SnapscreenFramework.SportEventCompetitor]?
  public var tvChannel: SnapscreenFramework.TvChannel? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol SnapscreenSnapDelegate : AnyObject {
  func snapscreenSnapViewController(_ viewController: SnapscreenFramework.SnapViewController, didSnapSportEvent sportEvent: SnapscreenFramework.SportEventSnapResultEntry)
}
@_hasMissingDesignatedInitializers public class SnapscreenSnapUIConfiguration {
  public var hideDefaultViewFinderAndQuadrangleDetection: Swift.Bool
  public var primaryBackgroundColor: UIKit.UIColor
  public var primaryColor: UIKit.UIColor
  public var primaryHighlightedColor: UIKit.UIColor
  public var primaryDisabledColor: UIKit.UIColor
  public var snapHintText: Swift.String
  public var snapHintTextColor: UIKit.UIColor
  public var snapProgressText: Swift.String
  public var snapProgressTextColor: UIKit.UIColor
  public var snapErrorGeneralText: Swift.String
  public var snapErrorConnectionIssueText: Swift.String
  public var snapErrorNoResultsText: Swift.String
  public var snapErrorTextColor: UIKit.UIColor
  @objc deinit
}
public struct SportEventCompetitor : Swift.Codable {
  public var name: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class SnapConfiguration {
  public var automaticSnap: Swift.Bool
  public var autosnapIntervalInSeconds: Swift.Double
  public var autosnapTimeoutDuration: Swift.Double
  public var quadrangleDetection: Swift.Bool
  public init()
  @objc deinit
}
@objc public class SnapscreenFingerprintResult : ObjectiveC.NSObject {
  @objc public init(fingerprintData: Foundation.Data?, preprocessedImageData: Foundation.Data?, preprocessedImageWidth: Swift.Int, preprocessedImageHeight: Swift.Int, preprocessedImageChannels: Swift.Int, quadrangle: SnapscreenFramework.SnapscreenQuadrangle?, timestamp: Swift.Int64)
  @objc deinit
}
extension SnapscreenFramework.SnapscreenEnvironment : Swift.Equatable {}
extension SnapscreenFramework.SnapscreenEnvironment : Swift.Hashable {}
extension SnapscreenFramework.SnapOddsOfferType : Swift.Equatable {}
extension SnapscreenFramework.SnapOddsOfferType : Swift.Hashable {}
extension SnapscreenFramework.SnapOddsOfferType : Swift.RawRepresentable {}
extension SnapscreenFramework.SnapOddsOutcomeType : Swift.Equatable {}
extension SnapscreenFramework.SnapOddsOutcomeType : Swift.Hashable {}
extension SnapscreenFramework.SnapOddsOutcomeType : Swift.RawRepresentable {}
